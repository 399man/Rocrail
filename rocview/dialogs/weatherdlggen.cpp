///////////////////////////////////////////////////////////////////////////// C++ code generated with wxFormBuilder (version Sep 12 2010)// http://www.wxformbuilder.org///// PLEASE DO "NOT" EDIT THIS FILE!///////////////////////////////////////////////////////////////////////////#include "weatherdlggen.h"///////////////////////////////////////////////////////////////////////////WeatherDlgGen::WeatherDlgGen( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style ){	this->SetSizeHints( wxDefaultSize, wxDefaultSize );		wxBoxSizer* bSizer1;	bSizer1 = new wxBoxSizer( wxVERTICAL );		wxFlexGridSizer* fgSizer1;	fgSizer1 = new wxFlexGridSizer( 0, 2, 0, 0 );	fgSizer1->AddGrowableCol( 1 );	fgSizer1->SetFlexibleDirection( wxBOTH );	fgSizer1->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );		m_labOutputs = new wxStaticText( this, wxID_ANY, wxT("Outputs"), wxDefaultPosition, wxDefaultSize, 0 );	m_labOutputs->Wrap( -1 );	fgSizer1->Add( m_labOutputs, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5 );		m_Outputs = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );	m_Outputs->SetMinSize( wxSize( 160,-1 ) );		fgSizer1->Add( m_Outputs, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5 );		m_labMinBri = new wxStaticText( this, wxID_ANY, wxT("Min. brightness"), wxDefaultPosition, wxDefaultSize, 0 );	m_labMinBri->Wrap( -1 );	fgSizer1->Add( m_labMinBri, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5 );		m_MinBri = new wxSpinCtrl( this, wxID_ANY, wxT("0"), wxDefaultPosition, wxSize( 80,-1 ), wxSP_ARROW_KEYS, 0, 255, 0 );	fgSizer1->Add( m_MinBri, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5 );		m_labMaxBri = new wxStaticText( this, wxID_ANY, wxT("Max brightness"), wxDefaultPosition, wxDefaultSize, 0 );	m_labMaxBri->Wrap( -1 );	fgSizer1->Add( m_labMaxBri, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5 );		m_MaxBri = new wxSpinCtrl( this, wxID_ANY, wxT("0"), wxDefaultPosition, wxSize( 80,-1 ), wxSP_ARROW_KEYS, 0, 255, 0 );	fgSizer1->Add( m_MaxBri, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5 );		m_labSunrise = new wxStaticText( this, wxID_ANY, wxT("Sunrise"), wxDefaultPosition, wxDefaultSize, 0 );	m_labSunrise->Wrap( -1 );	fgSizer1->Add( m_labSunrise, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5 );		wxFlexGridSizer* fgSizer2;	fgSizer2 = new wxFlexGridSizer( 0, 3, 0, 0 );	fgSizer2->SetFlexibleDirection( wxBOTH );	fgSizer2->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );		m_SunriseHour = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxSize( 40,-1 ), 0 );	m_SunriseHour->SetMaxLength( 2 ); 	fgSizer2->Add( m_SunriseHour, 0, wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM|wxLEFT, 5 );		m_staticText5 = new wxStaticText( this, wxID_ANY, wxT(":"), wxDefaultPosition, wxDefaultSize, 0 );	m_staticText5->Wrap( -1 );	fgSizer2->Add( m_staticText5, 0, wxALL|wxALIGN_CENTER_VERTICAL|wxALIGN_CENTER_HORIZONTAL, 5 );		m_SunriseMin = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxSize( 40,-1 ), 0 );	m_SunriseMin->SetMaxLength( 2 ); 	fgSizer2->Add( m_SunriseMin, 0, wxTOP|wxBOTTOM|wxRIGHT, 5 );		fgSizer1->Add( fgSizer2, 1, wxEXPAND, 5 );		m_labSunset = new wxStaticText( this, wxID_ANY, wxT("Sunset"), wxDefaultPosition, wxDefaultSize, 0 );	m_labSunset->Wrap( -1 );	fgSizer1->Add( m_labSunset, 0, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5 );		wxFlexGridSizer* fgSizer21;	fgSizer21 = new wxFlexGridSizer( 0, 3, 0, 0 );	fgSizer21->SetFlexibleDirection( wxBOTH );	fgSizer21->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );		m_SunsetHour = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxSize( 40,-1 ), 0 );	m_SunsetHour->SetMaxLength( 2 ); 	fgSizer21->Add( m_SunsetHour, 0, wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM|wxLEFT, 5 );		m_staticText51 = new wxStaticText( this, wxID_ANY, wxT(":"), wxDefaultPosition, wxDefaultSize, 0 );	m_staticText51->Wrap( -1 );	fgSizer21->Add( m_staticText51, 0, wxALL|wxALIGN_CENTER_VERTICAL|wxALIGN_CENTER_HORIZONTAL, 5 );		m_SunsetMin = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxSize( 40,-1 ), 0 );	m_SunsetMin->SetMaxLength( 2 ); 	fgSizer21->Add( m_SunsetMin, 0, wxTOP|wxBOTTOM|wxRIGHT, 5 );		fgSizer1->Add( fgSizer21, 1, wxEXPAND, 5 );		bSizer1->Add( fgSizer1, 0, wxEXPAND, 5 );		m_StdButtons = new wxStdDialogButtonSizer();	m_StdButtonsOK = new wxButton( this, wxID_OK );	m_StdButtons->AddButton( m_StdButtonsOK );	m_StdButtonsCancel = new wxButton( this, wxID_CANCEL );	m_StdButtons->AddButton( m_StdButtonsCancel );	m_StdButtonsHelp = new wxButton( this, wxID_HELP );	m_StdButtons->AddButton( m_StdButtonsHelp );	m_StdButtons->Realize();	bSizer1->Add( m_StdButtons, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, 5 );		this->SetSizer( bSizer1 );	this->Layout();	bSizer1->Fit( this );		this->Centre( wxBOTH );		// Connect Events	m_StdButtonsCancel->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( WeatherDlgGen::onCancel ), NULL, this );	m_StdButtonsHelp->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( WeatherDlgGen::onHelp ), NULL, this );	m_StdButtonsOK->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( WeatherDlgGen::onOK ), NULL, this );}WeatherDlgGen::~WeatherDlgGen(){	// Disconnect Events	m_StdButtonsCancel->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( WeatherDlgGen::onCancel ), NULL, this );	m_StdButtonsHelp->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( WeatherDlgGen::onHelp ), NULL, this );	m_StdButtonsOK->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( WeatherDlgGen::onOK ), NULL, this );	}