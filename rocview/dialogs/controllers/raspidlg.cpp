/* Rocrail - Model Railroad Software Copyright (C) 2002-2013 Rob Versluis, Rocrail.net Without an official permission commercial use is not permitted. Forking this project is not permitted. This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.*/#include "raspidlg.h"#include "rocview/public/guiapp.h"#include "rocrail/wrapper/public/DigInt.h"#include "rocrail/wrapper/public/RasPi.h"RaspiDlg::RaspiDlg( wxWindow* parent, iONode props ):RaspiGenDlg( parent ){  m_Props = props;  iONode raspiini = wDigInt.getraspi(m_Props);  if( raspiini == NULL ) {    raspiini = NodeOp.inst( wRasPi.name(), m_Props, ELEMENT_NODE );    NodeOp.addChild( m_Props, raspiini );  }  initLabels();  GetSizer()->Layout();  GetSizer()->Fit(this);  GetSizer()->SetSizeHints(this);  initValues();}void RaspiDlg::initLabels() {  m_labIID->SetLabel( wxGetApp().getMsg( "iid" ) );  m_PortBox->GetStaticBox()->SetLabel( wxGetApp().getMsg( "port" ) );  m_labShutdownPort->SetLabel( wxGetApp().getMsg( "shutdownserver" ) );  m_labEBreakPort->SetLabel( wxGetApp().getMsg( "ebreak" ) );  m_labPowerOffPort->SetLabel( wxGetApp().getMsg( "poweroff" ) );  m_labPowerOnPort->SetLabel( wxGetApp().getMsg( "poweron" ) );  m_OptionsBox->GetStaticBox()->SetLabel( wxGetApp().getMsg( "options" ) );  m_UseSensors->SetLabel( wxGetApp().getMsg( "sensors" ) );}void RaspiDlg::initValues() {  m_IID->SetValue( wxString( wDigInt.getiid( m_Props ), wxConvUTF8 ) );  iONode raspi = wDigInt.getraspi(m_Props);  m_ShutdownPort->SetValue( wRasPi.getshutdownport(raspi) );  m_EBreakPort->SetValue( wRasPi.getebreakport(raspi) );  m_PowerOffPort->SetValue( wRasPi.getpoweroffport(raspi) );  m_PowerOnPort->SetValue( wRasPi.getpoweronport(raspi) );  m_UseSensors->SetValue( wRasPi.isusesensors(raspi) ? true:false );}void RaspiDlg::evaluate() {  wDigInt.setiid( m_Props, m_IID->GetValue().mb_str(wxConvUTF8) );  iONode raspi = wDigInt.getraspi(m_Props);  wRasPi.setshutdownport(raspi, m_ShutdownPort->GetValue() );  wRasPi.setebreakport(raspi, m_EBreakPort->GetValue() );  wRasPi.setpoweroffport(raspi, m_PowerOffPort->GetValue() );  wRasPi.setpoweronport(raspi, m_PowerOnPort->GetValue() );  wRasPi.setusesensors(raspi, m_UseSensors->IsChecked() ? True:False);}void RaspiDlg::onCancel( wxCommandEvent& event ) {  EndModal( wxID_CANCEL );}void RaspiDlg::onOK( wxCommandEvent& event ) {  evaluate();  EndModal( wxID_OK );}