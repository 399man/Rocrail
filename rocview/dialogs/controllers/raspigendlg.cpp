///////////////////////////////////////////////////////////////////////////// C++ code generated with wxFormBuilder (version Sep 12 2010)// http://www.wxformbuilder.org///// PLEASE DO "NOT" EDIT THIS FILE!///////////////////////////////////////////////////////////////////////////#include "raspigendlg.h"///////////////////////////////////////////////////////////////////////////RaspiGenDlg::RaspiGenDlg( wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style ) : wxDialog( parent, id, title, pos, size, style ){	this->SetSizeHints( wxDefaultSize, wxDefaultSize );		wxBoxSizer* bSizer1;	bSizer1 = new wxBoxSizer( wxVERTICAL );		wxFlexGridSizer* fgSizer2;	fgSizer2 = new wxFlexGridSizer( 0, 2, 0, 0 );	fgSizer2->AddGrowableCol( 1 );	fgSizer2->SetFlexibleDirection( wxBOTH );	fgSizer2->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );		m_labIID = new wxStaticText( this, wxID_ANY, wxT("IID"), wxDefaultPosition, wxDefaultSize, 0 );	m_labIID->Wrap( -1 );	fgSizer2->Add( m_labIID, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5 );		m_IID = new wxTextCtrl( this, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );	fgSizer2->Add( m_IID, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5 );		bSizer1->Add( fgSizer2, 1, wxEXPAND, 5 );		m_PortBox = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, wxT("Ports") ), wxVERTICAL );		wxFlexGridSizer* fgSizer1;	fgSizer1 = new wxFlexGridSizer( 0, 2, 0, 0 );	fgSizer1->SetFlexibleDirection( wxBOTH );	fgSizer1->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );		m_labShutdownPort = new wxStaticText( this, wxID_ANY, wxT("Shutdown"), wxDefaultPosition, wxDefaultSize, 0 );	m_labShutdownPort->Wrap( -1 );	fgSizer1->Add( m_labShutdownPort, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5 );		m_ShutdownPort = new wxSpinCtrl( this, wxID_ANY, wxT("0"), wxDefaultPosition, wxSize( 80,-1 ), wxSP_ARROW_KEYS, 0, 16, 0 );	fgSizer1->Add( m_ShutdownPort, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5 );		m_labEBreakPort = new wxStaticText( this, wxID_ANY, wxT("Emergency break"), wxDefaultPosition, wxDefaultSize, 0 );	m_labEBreakPort->Wrap( -1 );	fgSizer1->Add( m_labEBreakPort, 0, wxALIGN_CENTER_VERTICAL|wxBOTTOM|wxRIGHT|wxLEFT, 5 );		m_EBreakPort = new wxSpinCtrl( this, wxID_ANY, wxT("0"), wxDefaultPosition, wxSize( 80,-1 ), wxSP_ARROW_KEYS, 0, 16, 0 );	fgSizer1->Add( m_EBreakPort, 0, wxALIGN_CENTER_VERTICAL|wxBOTTOM|wxRIGHT|wxLEFT, 5 );		m_labPowerOffPort = new wxStaticText( this, wxID_ANY, wxT("Power off"), wxDefaultPosition, wxDefaultSize, 0 );	m_labPowerOffPort->Wrap( -1 );	fgSizer1->Add( m_labPowerOffPort, 0, wxALIGN_CENTER_VERTICAL|wxBOTTOM|wxRIGHT|wxLEFT, 5 );		m_PowerOffPort = new wxSpinCtrl( this, wxID_ANY, wxT("0"), wxDefaultPosition, wxSize( 80,-1 ), wxSP_ARROW_KEYS, 0, 16, 0 );	fgSizer1->Add( m_PowerOffPort, 0, wxALIGN_CENTER_VERTICAL|wxBOTTOM|wxRIGHT|wxLEFT, 5 );		m_labPowerOnPort = new wxStaticText( this, wxID_ANY, wxT("Power on"), wxDefaultPosition, wxDefaultSize, 0 );	m_labPowerOnPort->Wrap( -1 );	fgSizer1->Add( m_labPowerOnPort, 0, wxBOTTOM|wxRIGHT|wxLEFT|wxALIGN_CENTER_VERTICAL, 5 );		m_PowerOnPort = new wxSpinCtrl( this, wxID_ANY, wxT("0"), wxDefaultPosition, wxSize( 80,-1 ), wxSP_ARROW_KEYS, 0, 16, 0 );	fgSizer1->Add( m_PowerOnPort, 0, wxBOTTOM|wxRIGHT|wxLEFT, 5 );		m_PortBox->Add( fgSizer1, 1, wxEXPAND, 5 );		bSizer1->Add( m_PortBox, 0, wxEXPAND|wxALL, 5 );		m_OptionsBox = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, wxT("Options") ), wxVERTICAL );		m_UseSensors = new wxCheckBox( this, wxID_ANY, wxT("Use inputs as sensors"), wxDefaultPosition, wxDefaultSize, 0 );	m_OptionsBox->Add( m_UseSensors, 0, wxALL, 5 );		bSizer1->Add( m_OptionsBox, 0, wxEXPAND|wxALL, 5 );		m_StdButtons = new wxStdDialogButtonSizer();	m_StdButtonsOK = new wxButton( this, wxID_OK );	m_StdButtons->AddButton( m_StdButtonsOK );	m_StdButtonsCancel = new wxButton( this, wxID_CANCEL );	m_StdButtons->AddButton( m_StdButtonsCancel );	m_StdButtons->Realize();	bSizer1->Add( m_StdButtons, 0, wxEXPAND|wxALL, 5 );		this->SetSizer( bSizer1 );	this->Layout();	bSizer1->Fit( this );		this->Centre( wxBOTH );		// Connect Events	m_StdButtonsCancel->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( RaspiGenDlg::onCancel ), NULL, this );	m_StdButtonsOK->Connect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( RaspiGenDlg::onOK ), NULL, this );}RaspiGenDlg::~RaspiGenDlg(){	// Disconnect Events	m_StdButtonsCancel->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( RaspiGenDlg::onCancel ), NULL, this );	m_StdButtonsOK->Disconnect( wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler( RaspiGenDlg::onOK ), NULL, this );	}