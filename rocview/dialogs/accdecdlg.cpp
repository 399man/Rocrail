/* Rocrail - Model Railroad Software Copyright (C) 2002-2013 Rob Versluis, Rocrail.net Without an official permission commercial use is not permitted. Forking this project is not permitted. This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.*/#include "accdecdlg.h"#include "wx/wxprec.h"#ifndef WX_PRECOMP#include "wx/wx.h"#include "wx/defs.h"#endif#include "rocrail/wrapper/public/Plan.h"#include "rocrail/wrapper/public/Dec.h"#include "rocrail/wrapper/public/DecList.h"#include "rocrail/wrapper/public/Item.h"#include "rocrail/wrapper/public/ModelCmd.h"#include "rocview/public/guiapp.h"#include "rocview/xpm/nopict.xpm"AccDecDlg::AccDecDlg( wxWindow* parent ):AccDecGenDlg( parent ){  m_Props = NULL;  m_Image->SetBitmapLabel( wxBitmap(nopict_xpm) );  initLabels();  m_IndexPanel->GetSizer()->Layout();  m_GeneralPanel->GetSizer()->Layout();  m_Notebook->Fit();  GetSizer()->Fit(this);  GetSizer()->SetSizeHints(this);  initIndex();}void AccDecDlg::onAdd( wxCommandEvent& event ){  int i = findID("NEW");  if( i == wxNOT_FOUND ) {    iONode model = wxGetApp().getModel();    if( model != NULL ) {      iONode declist = wPlan.getdeclist( model );      if( declist == NULL ) {        declist = NodeOp.inst( wDecList.name(), model, ELEMENT_NODE );        NodeOp.addChild( model, declist );      }      if( declist != NULL ) {        iONode dec = NodeOp.inst( wDec.name(), declist, ELEMENT_NODE );        NodeOp.addChild( declist, dec );        wDec.setid( dec, "NEW" );        m_Props = dec;        appendItem(dec);        setIDSelection(wItem.getid(dec));        initValues();      }    }  }}void AccDecDlg::onDelete( wxCommandEvent& event ){// TODO: Implement onDelete}void AccDecDlg::onCancel( wxCommandEvent& event ){  EndModal( wxID_CANCEL );}void AccDecDlg::onOK( wxCommandEvent& event ){  onApply(event);  EndModal( wxID_OK );}void AccDecDlg::initLabels() {  // Index  initList(m_IndexList, this, false, true, false, false);}bool AccDecDlg::initIndex() {  iONode model = wxGetApp().getModel();  if( model != NULL ) {    iONode declist = wPlan.getdeclist( model );    if( declist != NULL ) {      fillIndex(declist);      if( m_Props != NULL ) {        setIDSelection(wDec.getid( m_Props ));        return true;      }      else {        m_Props = setSelection(0);      }    }  }  return false;}void AccDecDlg::initValues() {}bool AccDecDlg::evaluate() {  return true;}void AccDecDlg::onApply( wxCommandEvent& event ){  if( m_Props == NULL )    return;  if( !evaluate() )    return;  if( !wxGetApp().isStayOffline() ) {    /* Notify RocRail. */    iONode cmd = NodeOp.inst( wModelCmd.name(), NULL, ELEMENT_NODE );    wModelCmd.setcmd( cmd, wModelCmd.modify );    NodeOp.addChild( cmd, (iONode)m_Props->base.clone( m_Props ) );    wxGetApp().sendToRocrail( cmd );    cmd->base.del(cmd);  }  else {    wxGetApp().setLocalModelModified(true);  }  initIndex();}